{
	/* Extending a layout */
	"edge Extend layout": {
		"prefix": "extends",
		"body": [
			"@extends('${1:name}')$2"
		],
		"description": "Edge - extends view layout"
	},
	"edge Section block": {
		"prefix": "section-block",
		"body": [
			"@section('${1:name}')",
			"  $2",
			"@endsection"
		],
		"description": "Edge - section block"
	},
	"edge Section no default": {
		"prefix": "section",
		"body": [
			"@!section('${1:name}')"
		],
		"description": "Edge - section no default"
	},
	/* Include sub-view */
	"edge Include view": {
		"prefix": "include",
		"body": [
			"@include('${1:name}')$2"
		],
		"description": "Edge - include view"
	},
	/* If Statements */
	"edge If-block": {
		"prefix": "if",
		"body": [
			"@if($1)",
			"  $2",
			"@endif"
		],
		"description": "Edge - @if block"
	},
	"edge If-else-block": {
		"prefix": "ifelse",
		"body": [
			"@if($1)",
			"  $2",
			"@else",
			"  $3",
			"@endif"
		],
		"description": "Edge - if-else block"
	},
	"edge If-elseif-block": {
		"prefix": "ifelseif",
		"body": [
			"@if($1)",
			"  $2",
			"@elseif($3)",
			"  $4",
			"@else",
			"  $5",
			"@endif"
		],
		"description": "Edge - if-else block"
	},
	"edge unless-block": {
		"prefix": "unless",
		"body": [
			"@unless($1)",
			"  $2",
			"@else",
			"  $3",
			"@endunless"
		],
		"description": "Edge - unless-block"
	},
	"edge Each-array-block": {
		"prefix": "each-array",
		"body": [
			"@each(${1:item} as ${2:collection})",
			"  $3",
			"@endeach"
		],
		"description": "Edge - @each array block"
	},
	"edge Each-object-block": {
		"prefix": "each-object",
		"body": [
			"@each(${1:key}, ${2:value} in ${3:object})",
			"  $3",
			"@endeach"
		],
		"description": "Edge - @each array block"
	},
	"edge Each-Else-block": {
		"prefix": "each-else",
		"body": [
			"@each(${1:item} in ${2:collection})",
			"  $3",
			"@else",
			"  $4",
			"@endeach"
		],
		"description": "Edge - @each else block"
	},
	/* Rendering views for collections */
	"edge each-include": {
		"prefix": "each-include",
		"body": [
			"@!each(${1:item} in ${2:collection}, include = '${3:partial}')$5"
		],
		"description": "Edge - @each include"
	},
	/* Comments */
	"edge comment": {
		"prefix": "comment",
		"body": [
			"{{-- ${1:comment} --}}",
			"$2"
		],
		"description": "Edge - comment block"
	},
	/* Display Data */
	"edge echo-data": {
		"prefix": "echo",
		"body": [
			"{{ ${1:data} }}$2"
		],
		"description": "Edge - echo data"
	},
	"edge echo-unescaped-data": {
		"prefix": "echo-html",
		"body": [
			"{{{ ${1:html_data} }}}$2"
		],
		"description": "Edge - echo unescaped data (allow html outputs)"
	},
	"edge echo-untouch": {
		"prefix": "echo-raw",
		"body": [
			"@{{ ${1:variable} }}$2"
		],
		"description": "Edge - echo untouched data (allow javascript expression)"
	},	
	"edge raw output": {
		"prefix": "raw",
		"body": [
			"@raw",
			"  $1",
			"@endraw"
		],
		"description": "Edge - echo untouched data (allow javascript expression)"
	},	
	"edge loop index": {
		"prefix": "loop-index",
		"body": [
			"\\$loop.${1:index}$2"
		],
		"description": "Edge - Holds the iteration index, start from 0"
    },
	"edge loop total": {
		"prefix": "loop-total",
		"body": [
			"\\$loop.${1:total}$2"
		],
		"description": "Edge - The total number of items"
    },
	"edge loop first": {
		"prefix": "loop-first",
		"body": [
			"@if(\\$loop.first)",
			"  ${1:{{-- This is the first iteration --\\}\\}}",
			"@endif",
			"$2"
		],
		"description": "Edge - Whether or not the item is the first in the loop"
	},
	"edge loop last": {
		"prefix": "loop-last",
		"body": [
			"@if(\\$loop.last)",
			"  ${1:{{-- This is the last iteration --\\}\\}}",
			"@endif",
			"$2"
		],
		"description": "Edge - Whether or not the item is the last in the loop"
    },
    "edge loop isEven": {
		"prefix": "loop-isEven",
		"body": [
			"@if(\\$loop.isEven)",
			"  ${1:{{-- This is the isEven code --\\}\\}}",
			"@endif",
			"$2"
		],
		"description": "Edge - Whether or not an iteration count is an even number"
    },
    "edge loop isOdd": {
		"prefix": "loop-isOdd",
		"body": [
			"@if(\\$loop.isOdd)",
			"  ${1:{{-- This is the isOdd code --\\}\\}}",
			"@endif",
			"$2"
		],
		"description": "Edge - Whether or not an iteration count is an odd number. The first item returns true for isOdd"
    },
	"edge component block": {
		"prefix": "component-block",
		"body": [
			"@component('$1')",
			"  $2",
			"@endcomponent"
		],
		"description": "Edge - component block"
	},
	"edge component": {
		"prefix": "ccomponent",
		"body": [
			"@!component('$1')"
		],
		"description": "Edge - component self close"
	},
	"edge slot": {
		"prefix": "yield",
		"body": [
			"@yield('$1')",
			"  $2",
			"@endyield"
		],
		"description": "Edge - yield slot"
	},
	/* adonisjs */
	"Adonis css": {
		"prefix": "css",
		"body": [
			"{{ css('$1') }}"
		],
		"description": "Adonis - make css link"
	},
	"Adonis script": {
		"prefix": "script",
		"body": [
			"{{ script('$1') }}"
		],
		"description": "Adonis - make script link"
	},
	"Adonis assetsUrl": {
		"prefix": "assetsUrl",
		"body": [
			"{{ assetsUrl('$1') }}"
		],
		"description": "Adonis - make asset link"
	},
	"Adonis route": {
		"prefix": "route",
		"body": [
			"{{ route('$1', { $2 }) }}"
		],
		"description": "Adonis - make link from route"
	},
	"Adonis url": {
		"prefix": "url",
		"body": [
			"{{ url }}"
		],
		"description": "Adonis - current url"
	},
	"Adonis auth-user": {
		"prefix": "auth-user",
		"body": [
			"{{ auth.user }}"
		],
		"description": "Adonis - current auth user"
	},
	"Adonis csrf": {
		"prefix": "csrf",
		"body": [
			"{{ csrfField() }}"
		],
		"description": "Adonis - csrf field"
	},
	"Adonis cspMeta": {
		"prefix": "cspMeta",
		"body": [
			"{{ cspMeta() }}"
		],
		"description": "Adonis - meta tag"
	},
	"Adonis Logged-in-block": {
		"prefix": "logged-in",
		"body": [
			"@loggedIn",
			"  $1",
			"@else",
			"  $2",
			"@endloggedIn"
		],
		"description": "Edge - @loggedIn else block"
    },
    "edge Layout view": {
		"prefix": "layout",
		"body": [
			"@layout('${1:name}')"
		],
		"description": "Edge - Layout view"
	},
    "edge Debug block": {
		"prefix": "debugger",
		"body": [
			"@debugger\n"
		],
		"description": "Edge - Debug block"
    },
    "edge Super extend": {
		"prefix": "super",
		"body": [
			"@super"
		],
		"description": "Edge - Super extend"
    },
    "edge Inline Svg": {
		"prefix": "inlineSvg",
		"body": [
			"@inlineSvg('${1:name}')$2"
		],
		"description": "Edge - Inline Svg"
    },
    "edge Range": {
		"prefix": "range",
		"body": [
			"{{ range($1, $2) }}"
		],
		"description": "range([start=0], end) - Returns an array of numbers within a given range"
    },
    "edge Batch": {
		"prefix": "batch",
		"body": [
			"{{ batch([ $1 ]) }}"
		],
		"description": "batch(array) - Convert an array to a batch of nested arrays."
    },
    "edge toJSON": {
		"prefix": "toJSON",
		"body": [
			"{{ toJSON({ $1 }) }}"
		],
		"description": "toJSON - Convert an object to a JSON string via JSON.stringify."
    },
    "edge First": {
		"prefix": "first",
		"body": [
			"{{ first([ $1 ]) }}"
		],
		"description": "Returns the first item from an array."
    },
    "edge Last": {
		"prefix": "last",
		"body": [
			"{{ last([ $1 ]) }}"
		],
		"description": "Returns the last item from an array."
    },
    "edge GroupBy": {
		"prefix": "groupBy",
		"body": [
			"{{ groupBy([ $1 ], '$2') }}"
		],
        "description": "Group an array via given field. For example group all articles for an author."
    },
    "edge Size": {
		"prefix": "size",
		"body": [
			"{{ size($1) }}"
		],
		"description": "Return size of a string or an array."
    },
    "edge El": {
		"prefix": "el",
		"body": [
			"{{ el($1) }}"
		],
		"description": "Returns an HTML string by replacing dynamic placeholders with actual content. It is helpful inside if shorthand."
    },
    "edge camelCase": {
		"prefix": "camelCase",
		"body": [
			"{{ camelCase('$1') }}"
		],
		"description": "Convert string to camelcase."
    },
    "edge upperCase": {
		"prefix": "upperCase",
		"body": [
			"{{ upperCase('$1') }}"
		],
		"description": "Convert string to upperCase."
    },
    "edge upperFirst": {
		"prefix": "upperFirst",
		"body": [
			"{{ upperFirst('$1') }}"
		],
		"description": "Convert first character of a string to uppercase."
    },
    "edge lowerCase": {
		"prefix": "lowerCase",
		"body": [
			"{{ lowerCase('$1') }}"
		],
		"description": "Convert string to lowerCase."
    },
    "edge lowerFirst": {
		"prefix": "lowerFirst",
		"body": [
			"{{ lowerFirst('$1') }}"
		],
		"description": "Convert first character of a string to lowercase."
    },
    "edge Capitalize": {
		"prefix": "capitalize",
		"body": [
			"{{ capitalize('$1') }}"
		],
		"description": "Convert first character of all words inside a string to uppercase."
    },
    "edge Truncate": {
		"prefix": "truncate",
		"body": [
			"{{ truncate('$1', $2, '...') }}"
		],
		"description": "truncate(string, limit, omission = …​) - Truncate a string to a given limit"
    },
    "edge toAnchor": {
		"prefix": "toAnchor",
		"body": [
			"{{ toAnchor('$1', '$2') }}"
		],
		"description": "toAnchor(url, title = url) - Convert a url to an anchor tag"
    },
    "edge urlEncode": {
		"prefix": "urlEncode",
		"body": [
			"{{ urlEncode('$1') }}"
		],
		"description": "Encode a string to be url safe."
    }

}